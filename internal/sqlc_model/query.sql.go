// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc_model

import (
	"context"
)

const claimThisURL = `-- name: ClaimThisURL :exec
UPDATE urls
SET status = 'CLAIMED', timestamp = strftime('%s', 'now')
WHERE project = ? AND id = ?
RETURNING project, id, value, via, host, path, type, crawler, status, lift_off, timestamp
`

type ClaimThisURLParams struct {
	Project string
	ID      string
}

// index: PRIMARY KEY
func (q *Queries) ClaimThisURL(ctx context.Context, arg ClaimThisURLParams) error {
	_, err := q.db.ExecContext(ctx, claimThisURL, arg.Project, arg.ID)
	return err
}

const countSeen = `-- name: CountSeen :one
SELECT COUNT(*) FROM seens
WHERE project = ? AND type = ? AND value = ?
`

type CountSeenParams struct {
	Project string
	Type    string
	Value   string
}

// index: PRIMARY KEY
func (q *Queries) CountSeen(ctx context.Context, arg CountSeenParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSeen, arg.Project, arg.Type, arg.Value)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSeen = `-- name: CreateSeen :exec
INSERT INTO seens (project, type, value)
VALUES (?, ?, ?)
`

type CreateSeenParams struct {
	Project string
	Type    string
	Value   string
}

func (q *Queries) CreateSeen(ctx context.Context, arg CreateSeenParams) error {
	_, err := q.db.ExecContext(ctx, createSeen, arg.Project, arg.Type, arg.Value)
	return err
}

const createURL = `-- name: CreateURL :exec
INSERT INTO urls (project, id, value, via, host, path, type, crawler, status, lift_off, timestamp)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateURLParams struct {
	Project   string
	ID        string
	Value     string
	Via       string
	Host      string
	Path      string
	Type      string
	Crawler   string
	Status    string
	LiftOff   int64
	Timestamp int64
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) error {
	_, err := q.db.ExecContext(ctx, createURL,
		arg.Project,
		arg.ID,
		arg.Value,
		arg.Via,
		arg.Host,
		arg.Path,
		arg.Type,
		arg.Crawler,
		arg.Status,
		arg.LiftOff,
		arg.Timestamp,
	)
	return err
}

const deleteURL = `-- name: DeleteURL :exec
DELETE FROM urls
WHERE project = ? AND id = ?
`

type DeleteURLParams struct {
	Project string
	ID      string
}

// index: PRIMARY KEY
func (q *Queries) DeleteURL(ctx context.Context, arg DeleteURLParams) error {
	_, err := q.db.ExecContext(ctx, deleteURL, arg.Project, arg.ID)
	return err
}

const doneURL = `-- name: DoneURL :exec
UPDATE urls
SET status = 'DONE', timestamp = strftime('%s', 'now')
WHERE project = ? AND id = ?
`

type DoneURLParams struct {
	Project string
	ID      string
}

// index: PRIMARY KEY
func (q *Queries) DoneURL(ctx context.Context, arg DoneURLParams) error {
	_, err := q.db.ExecContext(ctx, doneURL, arg.Project, arg.ID)
	return err
}

const getFreshURLs = `-- name: GetFreshURLs :many

SELECT project, id, value, via, host, path, type, crawler, status, lift_off, timestamp FROM urls
WHERE project = ? AND status = 'FRESH'
LIMIT ?
`

type GetFreshURLsParams struct {
	Project string
	Limit   int64
}

// -- name: GetURL :one
// SELECT * FROM urls
// WHERE project = ? AND id = ? LIMIT 1;
// index: urls_project_status
func (q *Queries) GetFreshURLs(ctx context.Context, arg GetFreshURLsParams) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, getFreshURLs, arg.Project, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.Project,
			&i.ID,
			&i.Value,
			&i.Via,
			&i.Host,
			&i.Path,
			&i.Type,
			&i.Crawler,
			&i.Status,
			&i.LiftOff,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const refreshSeen = `-- name: RefreshSeen :exec
UPDATE seens
SET timestamp = strftime('%s', 'now')
WHERE project = ? AND type = ? AND value = ?
`

type RefreshSeenParams struct {
	Project string
	Type    string
	Value   string
}

func (q *Queries) RefreshSeen(ctx context.Context, arg RefreshSeenParams) error {
	_, err := q.db.ExecContext(ctx, refreshSeen, arg.Project, arg.Type, arg.Value)
	return err
}

const resetURL = `-- name: ResetURL :exec
UPDATE urls
SET status = 'FRESH', timestamp = strftime('%s', 'now')
WHERE project = ? AND id = ?
`

type ResetURLParams struct {
	Project string
	ID      string
}

// index: PRIMARY KEY
func (q *Queries) ResetURL(ctx context.Context, arg ResetURLParams) error {
	_, err := q.db.ExecContext(ctx, resetURL, arg.Project, arg.ID)
	return err
}
